#!/bin/sh

USERDIR=${USERDIR:-/home/${USER}}
SCRIPTPARENT=${SCRIPTPARENT:-$(dirname ${0})}

## ensure GPG_TTY set to allow interactive agent usage from inside a pipe
# [setenv | export] GPG_TTY[=]`tty`
GPG_TTY=`tty`

## ? (--keyring) alternate keyring ; ? (-v) verbose output ; ? (-a) armor
#GPG_CMD=${GPG_CMD:-gpg}
GPG_CMD=${GPG_CMD:-gpg --homedir ${USERDIR}/.gnupg}

usage="usage:
  [USE_OPENSSL=0 | USE_KEEPASS=0] ${0} getpass_entry [appmail]
  ${0} gettoken_entry [tokenmail]"

getpass_entry() { # input: entry ; output: password
  entry=${1:-appmail}
  USE_OPENSSL=${USE_OPENSSL:-0} ; USE_KEEPASS=${USE_KEEPASS:-0}
  #stty -echo ; read -p "Password for entry(${entry}): " passw ; stty echo
  #echo ${passw}

  if [ ! "0" = "${USE_KEEPASS:-0}" ] ; then
    keepassdb=${keepassdb:-${USERDIR}/.keepass/store.kdbx}

    keepassxc-cli show -a password ${keepassdb} ${entry} ;
  elif [ ! "0" = "${USE_OPENSSL:-0}" ] ; then
    certkeyfile=${certkeyfile:-${USERDIR}/.pki/certkey.pem}
    entry_pardir="${USERDIR}/.pki/stored_passwords"
    extn_cms="p7m" ; cmsopts_inform=""
    if [ ! -f "${entry_pardir}/${entry}.p7m" ] && [ -f "${entry_pardir}/${entry}.pem" ] ; then
      extn_cms="pem" ; cmsopts_inform="-inform PEM" ;
    fi

    if [ -f "${entry_pardir}/${entry}.${extn_cms}" ] ; then
      openssl cms -decrypt -inkey ${certkeyfile} ${cmsopts_inform} \
        -in ${entry_pardir}/${entry}.${extn_cms} ;
    else # [ -f "${entry_pardir}/${entry}.enc" ] ; then
      openssl pkeyutl -decrypt -inkey ${certkeyfile} \
        -pkeyopt rsa_padding_mode:oeap -in ${entry_pardir}/${entry}.enc ;
    fi ;
  else # assume gnupg
    extn=gpg
    if [ -f "${USERDIR}/.password-store/${entry}.asc" ] ; then
      extn=asc
    fi ;
    ${GPG_CMD} --no-tty -qd ${USERDIR}/.password-store/${entry}.${extn} ;
  fi
}

gettoken_entry() { # input: entry ; output: token
  entry=${1:-tokenmail}
  tokenfile=${tokenfile:-${entry}.tokens}

  python ${USERDIR}/.config/mutt/oauth2.py ${tokenfile}
}

is_function="0"
func=${1} ; shift

case "${func}" in
  "getpass_entry") is_function="1" ;;
  "gettoken_entry") is_function="1" ;;
esac
if [ "0" = "${is_function}" ] ; then
  printf "${usage}\n" ; exit ;
fi
${func} ${@}
