#getpass_mail = 'abcd0123'

import os, sys
from subprocess import check_output, getoutput

SCRIPTPARENT = os.path.dirname(os.path.abspath(__file__))
USERDIR = os.environ.get('USERDIR', '/home/{0}'.format(os.environ.get('USER', 'sample')))

# ensure GPG_TTY set to allow interactive agent usage from inside a pipe
os.environ['GPG_TTY'] = os.getenv('GPG_TTY', getoutput('tty'))

## ? (--keyring) alternate keyring ; ? (-v) verbose output ; ? (-a) armor
#GPG_CMD = os.getenv('GPG_CMD', 'gpg')
GPG_CMD = os.getenv('GPG_CMD', 'gpg --homedir {0}/.gnupg'.format(USERDIR))

def getpass_entry(entry='appmail', use_openssl=False, use_keepass=False):
  #import getpass
  #return getpass.getpass("Password for entry({0}): ".format(entry))
  
  if use_keepass:
    keepassdb = os.environ.get('keepassdb', '{0}/.keepass/store.kdbx'.format(
      USERDIR))
    return getoutput('keepassxc-cli show -a password {0} {1}'.format(
      keepassdb, entry)).split('\n')[-1]
  elif use_openssl:
    certkeyfile = os.environ.get('certkeyfile', '{0}/.pki/certkey.pem'.format(
      USERDIR))
    entry_pardir = '{0}/.pki/stored_passwords'.format(USERDIR)
    extn_cms = "p7m" ; cmsopts_inform = ""
    if not os.path.exists('{0}/{1}.p7m'.format(entry_pardir, entry)) and
        os.path.exists('{0}/{1}.pem'.format(entry_pardir, entry)):
      extn_cms = "pem" ; cmsopts_inform = "-inform PEM"
    if os.path.exists('{0}/{1}.{2}'.format(entry_pardir, entry, extn_cms)):
      return getoutput('openssl cms -decrypt -inkey {0} {1} -in {2}/{3}.{4}'.format(
        certkeyfile, cmsopts_inform, entry_pardir, entry, extn_cms)
        ).split('\n')[-1]
    else: # os.path.exists('{0}/{1}.enc'.format(entry_pardir, entry)):
      return getoutput('openssl pkeyutl -decrypt -inkey {0} -pkeyopt rsa_padding_mode:oeap -in {1}/{2}.enc'.format(
        certkeyfile, entry_pardir, entry)).split('\n')[-1]
  else: # assume gnupg
    extn = 'gpg'
    if os.path.exists('{0}/.password-store/{1}.asc'.format(USERDIR, entry)):
      extn = 'asc'
    #return check_output('{0} --no-tty -qd {1}/.password-store/{2}.{3}'.format(
    #  GPG_CMD, USERDIR, entry, extn), shell=True).decode().strip('\n')
    return getoutput('{0} --no-tty -qd {1}/.password-store/{2}.{3}'.format(
      GPG_CMD, USERDIR, entry, extn)).split('\n')[-1]

def gettoken_entry(entry='tokenmail'):
  tokenfile = os.environ.get('tokenfile', '{0}.tokens'.format(entry))
  
  return getoutput('python {0}/.config/mutt/oauth2.py {1}'.format(
    USERDIR, tokenfile)).split('\n')[-1]


if __name__ == '__main__':
  if 1 >= len(sys.argv):
    sys.exit(1)
  script_name, *args = sys.argv
  
  if 1 < len(sys.argv):
    func_name = args.pop(0)
    rest = args
  else:
    func_name, rest = args, []
  print(globals()[func_name](*rest), end='')


# get_secret.py usage example:
# python get_secret.py getpass_entry appmail ['' '']
# python get_secret.py gettoken_entry tokenmail
