# nc -l [-p] {port} > file ## nc -w3 {host} {port} < file  # netcat xfr
# passwd crypted hash: [md5|sha256|sha512] - [$1|$5|$6]$...
# python -c "import crypt,getpass ; print(crypt.crypt(getpass.getpass(), '\$6\$16CHARACTERSSALT'))"
# perl -e "print crypt('password', '\$6\$16CHARACTERSSALT') . \"\n\""

set -x

DEVX=${DEVX:-da0} ; INIT_HOSTNAME=${INIT_HOSTNAME:-freebsd-boxp0000}
ADD_VAGRANTUSER=${ADD_VAGRANTUSER:-0}

export nonInteractive="YES"
# da0p1: for BIOS 512K freebsd-boot (gptboot0) ; for EFI 200M efi (efiboot)
PARTITIONS="${DEVX} gpt { 512k freebsd-boot, 200M efi, 4g freebsd-swap, 
	16G freebsd-ufs /, 8G freebsd-ufs /var, 32G freebsd-ufs /usr/home }"
DISTRIBUTIONS="kernel.txz base.txz lib32.txz "


#!/bin/sh
set -x

DEVX=${DEVX:-da0}

sysctl kern.geom.debugflags ; sysctl kern.geom.debugflags=16
sysctl kern.geom.label.disk_ident.enable=0
sysctl kern.geom.label.gptid.enable=0
sysctl kern.geom.label.gpt.enable=1


#bsdinstall preamble
#--------------------
#export nonInteractive="YES"
## da0p1: for BIOS 512K freebsd-boot (gptboot0) ; for EFI 200M efi (efiboot)
#PARTITIONS="${DEVX} gpt { 512k freebsd-boot, 200M efi, 4g freebsd-swap, 
#	16G freebsd-ufs /, 8G freebsd-ufs /var, 32G freebsd-ufs /usr/home }"
#DISTRIBUTIONS="kernel.txz base.txz lib32.txz "


gpart bootcode -b /boot/pmbr -p /boot/gptboot -i 1 $DEVX
gpart bootcode -b /boot/pmbr $DEVX

gpart modify -l gptboot0 -i 1 $DEVX ; gpart modify -l efiboot -i 2 $DEVX
gpart modify -l fsSwap -i 3 $DEVX ; gpart modify -l fsRoot -i 4 $DEVX
gpart modify -l fsVar -i 5 $DEVX ; gpart modify -l fsHome -i 6 $DEVX

tunefs -n enable -t enable /dev/gpt/fsRoot
tunefs -n enable -t enable /dev/gpt/fsVar
tunefs -n enable -t enable /dev/gpt/fsHome

sync ; gpart show -p ; sleep 3 ; gpart show -l ; sleep 3
zpool list -v ; sleep 3 ; zfs list ; sleep 3
glabel status ; sleep 3 ; geli status ; sleep 3


mkdir -p /compat/linux/proc
sh -c 'cat > /etc/fstab' << EOF
/dev/gpt/fsSwap    none        swap    sw      0   0
/dev/gpt/fsRoot    /           ufs     rw      1   1
/dev/gpt/fsVar     /var        ufs     rw      2   2
/dev/gpt/fsHome    /usr/home   ufs     rw      2   2

procfs             /proc       procfs  rw      0   0
linprocfs          /compat/linux/proc  linprocfs   rw  0   0

EOF


mkdir -p boot/efi ; mount -t msdosfs /dev/${DEVX}p2 boot/efi
(cd boot/efi ; mkdir -p efi/freebsd efi/BOOT)
cp boot/loader.efi boot/zfsloader boot/efi/efi/freebsd/
cp boot/loader.efi boot/efi/efi/BOOT/BOOTX64.EFI


# ifconfig wlan create wlandev ath0
# ifconfig wlan0 up scan
# dhclient wlan0

ifdev=$(ifconfig | grep '^[a-z]' | grep -ve lo0 | cut -d: -f1 | head -n 1)
#wlan_adapter=$(ifconfig | grep -B3 -i wireless) # ath0 ?
#sysctl net.wlan.devices ; sleep 3


chmod 1777 /tmp ; chmod 1777 /var/tmp
ln -s /usr/home /home


sh -c 'cat >> /boot/loader.conf' << EOF
#vfs.root.mountfrom="ufs:gpt/fsRoot"
#vfs.root.mountfrom="zfs:zvRoot/ROOT/default"

EOF
sysrc -f /boot/loader.conf linux_load="YES"
sysrc -f /boot/loader.conf cuse4bsd_load="YES"
sysrc -f /boot/loader.conf fuse_load="YES"
#sysrc -f /boot/loader.conf if_ath_load="YES"

sysrc fuse_enable="YES"
sysrc linux_enable="YES"

sh -c 'cat >> /etc/sysctl.conf' << EOF
kern.geom.label.disk_ident.enable="0"
kern.geom.label.gptid.enable="0"
kern.geom.label.gpt.enable="1"

EOF


sysrc hostname="${INIT_HOSTNAME}"
#sysrc wlans_ath0="${ifdev}"
#sysrc create_args_wlan0="country US regdomain FCC"
#sysrc ifconfig_${ifdev}="WPA SYNCDHCP"
sysrc ifconfig_${ifdev}="SYNCDHCP"
sysrc ifconfig_${ifdev}_ipv6="inet6 accept_rtadv"
#resolvconf
#sh -c 'cat >> /etc/resolv.conf' << EOF
#nameserver 8.8.8.8
#
#EOF

sed -i '' '/127.0.1.1/d' /etc/hosts
echo -e "127.0.1.1    ${INIT_HOSTNAME}.localdomain    ${INIT_HOSTNAME}" >> /etc/hosts


sysrc ntpd_enable="YES"
sysrc ntpd_sync_on_start="YES"
#sysrc sshd_enable="YES"


ASSUME_ALWAYS_YES=yes pkg -o OSVERSION=9999999 update -f
pkg install -y sudo lxde-meta


#echo -n "${PLAIN_PASSWD:-abcd0123}" | pw usermod root -h 0
echo -n "${CRYPTED_PASSWD:-\$6\$16CHARACTERSSALT\$o/XwaDmfuxBWVf1nEaH34MYX8YwFlAMo66n1.L3wvwdalv0IaV2b/ajr7xNcX/RFIPvfBNj.2Qxeh7v4JTjJ91}" | pw usermod root -H 0
pw groupadd usb ; pw groupmod usb -m root

mkdir -p /home/packer
#echo -n "${PLAIN_PASSWD:-abcd0123}" | pw useradd packer -h 0 -m -G wheel,operator -s /bin/tcsh -d /home/packer -c "Packer User"
echo -n "${CRYPTED_PASSWD:-\$6\$16CHARACTERSSALT\$o/XwaDmfuxBWVf1nEaH34MYX8YwFlAMo66n1.L3wvwdalv0IaV2b/ajr7xNcX/RFIPvfBNj.2Qxeh7v4JTjJ91}" | pw useradd packer -H 0 -m -G wheel,operator -s /bin/tcsh -d /home/packer -c "Packer User"
chown -R packer:$(id -gn packer) /home/packer

#sh -c 'cat >> /usr/local/etc/sudoers.d/99_packer' << EOF
#Defaults:packer !requiretty
#$(id -un packer) ALL=(ALL) NOPASSWD: ALL
#EOF
#chmod 0440 /usr/local/etc/sudoers.d/99_packer


if [ ! "0" = "${ADD_VAGRANTUSER}" ] ; then
mkdir -p /home/vagrant ;
echo -n vagrant | pw useradd vagrant -h 0 -m -G wheel,operator -s /bin/tcsh -d /home/vagrant -c "Vagrant User" ;
#echo 'set prompt = "%N@%m:%~ %# "' >> /home/vagrant/.cshrc ;
chown -R vagrant:$(id -gn vagrant) /home/vagrant ;

#sh -c 'cat >> /usr/local/etc/sudoers.d/99_vagrant' << EOF ;
#Defaults:vagrant !requiretty
#$(id -un vagrant) ALL=(ALL) NOPASSWD: ALL
#EOF
#chmod 0440 /usr/local/etc/sudoers.d/99_vagrant ;
fi


#sed -i '' "/PermitRootLogin/ s|^\(.*\)$|PermitRootLogin yes|" /etc/ssh/sshd_config
sed -i '' "/^%wheel.*(ALL)\s*ALL/ s|%wheel|# %wheel|" /usr/local/etc/sudoers
sed -i '' "/^#.*%wheel.*NOPASSWD.*/ s|^#.*%wheel|%wheel|" /usr/local/etc/sudoers
sed -i '' "s|^[^#].*requiretty|# Defaults requiretty|" /usr/local/etc/sudoers


mkdir -p /usr/local/etc/pkg/repos
sh -c 'cat >> /usr/local/etc/pkg/repos/FreeBSD.conf' << EOF
FreeBSD: { enabled: false }

FreeBSD-nearby: {
	url: "pkg+http://${MIRROR:-pkg0.nyi.freebsd.org}/\${ABI}/quarterly",
	mirror_type: "srv",
	signature_type: "fingerprints",
	fingerprints: "/usr/share/keys/pkg",
	enabled: true
}

EOF

ASSUME_ALWAYS_YES=yes pkg -o OSVERSION=9999999 update -f


cp /tmp/installscript /root/ ; sync

efibootmgr -c -l /mnt/boot/efi/efi/BOOT/BOOTX64.EFI -L Default
efibootmgr -c -l /mnt/boot/efi/efi/freebsd/loader.efi -L FreeBSD
efibootmgr -v ; sleep 3
read -p "Activate EFI BootOrder XXXX (or blank line to skip): " bootorder
if [ ! -z "$bootorder" ] ; then
  efibootmgr -a $bootorder ;
fi

sync ; swapoff -a ; reboot #poweroff
