#!/usr/bin/env python

import os, sys
import smtplib

MIN_PYTHON = (3, 6)
if sys.version_info < MIN_PYTHON:
  sys.exit("Python %s.%s or later is required.\n" % MIN_PYTHON)

SCRIPTPARENT = os.path.dirname(os.path.abspath(__file__))
sys.path.append(os.path.abspath(SCRIPTPARENT))

def parse_cmdopts(args=None):
  import argparse
  
  opts_parser = argparse.ArgumentParser()
  
  opts_parser.add_argument('recips', nargs='+',
    help='Recipients (to)')
  opts_parser.add_argument('-e', '--endpoint', default='smtp.gmail.com',
    help='Specify smtp endpoint(host)(default: smtp.gmail.com)')
  opts_parser.add_argument('-p', '--port', default=465,
    help='Specify smtp port(default: 465)')
  opts_parser.add_argument('-a', '--auth', default='plain',
    choices=['plain', 'login', 'oauthbearer', 'xoauth2'],
    help='Specify auth method(default: plain)')
  opts_parser.add_argument('-f', '--sender', default='a.sendr@gmail.com',
    help='Specify smtp sender(from)(default: a.sendr@gmail.com)')
  opts_parser.add_argument('-s', '--subj', default='email subject',
    help='Specify smtp subject(default: email subject)')
  opts_parser.add_argument('-c', '--use_curl', action='store_true',
    default=False, help='Use curl(default: False)')

  opts_parser.add_argument('-i', '--infile', type=argparse.FileType('r'),
    default=sys.stdin, help='Input file (default: sys.stdin)')
  #opts_parser.add_argument('-o', '--outfile', type=argparse.FileType('w+'),
  #  default=sys.stdout, help='Output file (default: sys.stdout)')
  
  return opts_parser.parse_args(args)

def main(argv=None):
  #sys.path.append(os.path.abspath(SCRIPTPARENT))
  from get_secret import getpass_entry, gettoken_entry
  from email.message import EmailMessage
  from email.mime.text import MIMEText
  
  opts_hash = parse_cmdopts(argv)
  #entry = input("Input password entry: ")
  
  if opts_hash.auth in ['oauthbearer', 'xoauth2']:
    entry = os.getenv('entry', 'tokenmail')
    token = gettoken_entry(entry)
    
    sasl_str = 'n,a={0},\1auth=Bearer {1}\1\1'.format(opts_hash.sender, token)
    if 'xoauth2' == opts_hash.auth:
      sasl_str = 'user={0}\1auth=Bearer {1}\1\1'.format(opts_hash.sender, token)
  else: # plain | login
    #import getpass
    #passw = getpass.getpass("Password for sender({0}): ".format(
    #  opts_hash.sender))
    entry = os.getenv('entry', 'appmail')
    passw = getpass_entry(entry)
    
    sasl_str = '\0{0}\0{1}'.format(opts_hash.sender, passw)
  
  #content = "From: {0}\nTo: {1}\nSubject: {2}\n{3}\n.\n".format(
  #  opts_hash.sender, ','.join(opts_hash.recips), opts_hash.subj,
  #  opts_hash.infile.read())
  msg = EmailMessage()
  msg['From'] = opts_hash.sender
  msg['To'] = ','.join(opts_hash.recips)
  msg['Subject'] = opts_hash.subj
  #msg.attach(MIMEType(opts_hash.infile.read(), 'plain'))
  msg.set_payload(opts_hash.infile.read())
  content = msg.as_string() # unixfrom=True
  
  if opts_hash.use_curl:
    import io, pycurl
    
    curl_conn = pycurl.Curl()
    curl_conn.setopt(curl_conn.URL, "smtps://{0}".format(opts_hash.endpoint))
    curl_conn.setopt(curl_conn.PORT, opts_hash.port)
    curl_conn.setopt(curl_conn.USE_SSL, pycurl.USESSL_ALL)
    curl_conn.setopt(curl_conn.CRLF, 1)
    curl_conn.setopt(curl_conn.UPLOAD, 1)
    #curl_conn.setopt(curl_conn.IPRESOLVE, pycurl.IPRESOLVE_V4)
    #curl_conn.setopt(curl_conn.FOLLOWLOCATION, 1)
    #curl_conn.setopt(curl_conn.CONNECTTIMEOUT, 30)
    #curl_conn.setopt(curl_conn.VERBOSE, 1)
    
    if opts_hash.auth in ['oauthbearer', 'xoauth2']:
      curl_conn.setopt(curl_conn.USERNAME, opts_hash.sender)
      curl_conn.setopt(curl_conn.XOAUTH2_BEARER, token)
    else:
      curl_conn.setopt(curl_conn.USERPWD, 
        "{0}:{1}".format(opts_hash.sender, passw))
    
    curl_conn.setopt(curl_conn.MAIL_FROM, opts_hash.sender)
    curl_conn.setopt(curl_conn.MAIL_RCPT, opts_hash.recips)
    
    istrm = io.BytesIO(content.encode())
    curl_conn.setopt(curl_conn.READDATA, istrm)
    
    curl_conn.perform()
    #print(curl_conn.perform_rs())
    
    curl_conn.close()
    sys.exit(0)
  
  smtp_conn = smtplib.SMTP_SSL(opts_hash.endpoint, opts_hash.port)
  
  smtp_conn.ehlo(opts_hash.endpoint)
  smtp_conn.helo(opts_hash.endpoint)
  
  # auth() method base64 encodes sasl str
  smtp_conn.auth(opts_hash.auth, lambda _=None: sasl_str)
  smtp_conn.sendmail(opts_hash.sender, opts_hash.recips, content)
  
  smtp_conn.quit()


if '__main__' == __name__:
  import sys
  #raise SystemExit(main(sys.argv[1:]))
  sys.exit(main(sys.argv[1:]))


# smtps_cli.py usage example:
# python smtps_cli.py [-e smtp.gmail.com] [-p 465] [-a plain]
#   [-f a.sendr@gmail.com] [-s "email subject"] \
#   [-i [data.[txt|mime]|smime.p7m]] recip [...recipN]

# NOTE: possible errors/failures for ipv6 --- to disable
# (FreeBSD) [sudo] sysctl net.inet6.ip6.v6only=0
# (Linux)   [sudo] sysctl net.ipv6.conf.*.disable_ipv6=1

# (smime enc) [cat /dev/null |] python mime_data.py mime_mixed \
#   data.txt[,dataN.txt] | openssl cms -encrypt -aes256 recip.crt > smime.p7m
# (gpg enc) cat data.txt | gpg --encrypt --recipient recip@email.com \
#   > data.txt.gpg
# (mime msg) [cat /dev/null |] python mime_data.py mime_mixed \
#   data.txt[.gpg][,dataN.txt[.gpg]] > data.mime
