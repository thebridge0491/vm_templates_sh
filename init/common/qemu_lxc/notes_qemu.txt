# NOTE, Linux|BSD config for qemu network(s) - ethernet bridged br0 & nat br1
# (Linux)                              (BSD)
# /etc/sysctl.d/99-sysctl.conf ..      /etc/sysctl.conf ..
# ----------------------------------   ------------------------
# net.ipv4.ip_forward=1                net.link.tap.user_open="1"
# net.ipv4.conf.wlan0.forwarding=1     net.link.tap.up_on_open="1"
# net.ipv6.conf.default.forwarding=1   net.inet.ip.forwarding="1"
# net.ipv6.conf.all.forwarding=1       net.inet6.ip6.forwarding="1"

# (Debian & derivatives)      (FreeBSD)
# /etc/network/interfaces ..  /boot/loader.conf ..  /etc/devfs.conf ..
# --------------------------  --------------------  -------------------
# allow-hotplug eth0          if_bridge_load="YES"  own   tap*  :operator
# #iface eth0 inet dhcp       if_tap_load="YES"     perm  tap*  0660
# #iface eth0 inet6 auto
# iface eth0 inet manual      /etc/devfs.rules ..
#                             -------------------
# auto br1                    [devfsrules_system=10]
# iface br1 inet static       add   path   'tap*'   mode 0660  group operator
#   bridge_ports none
#   bridge_stp off            /etc/rc.conf ..
#   bridge_maxwait 0          ----------------------
#   bridge_fd 0               ifconfig_alc0="SYNCDHCP"
#   address 192.168.1.161     ifconfig_alc0_ipv6="inet6 accept_rtadv"
#   #netmask 255.255.255.224  #ifconfig_alc0="up"
#   #gateway 192.168.0.1
# auto br0                    wlans_ath0="wlan0"
# iface br0 inet dhcp         create_args_wlan0="country US regdomain FCC"
#   bridge_ports regex eth.*  ifconfig_wlan0="WPA SYNCDHCP"
#   bridge_stp off            ifconfig_wlan0_ipv6="inet6 accept_rtadv"
#   bridge_maxwait 0          #create_args_wlan0="wlanaddr ??:??:??:??:??:?? country US \
#   bridge_fd 0                 regdomain FCC"
# iface br0 inet6 auto        #ifconfig_wlan0="WPA up"
#
#                             cloned_interfaces="bridge1 bridge0"
#                             #cloned_interfaces="lagg0 bridge1 bridge0"
#                             #ifconfig_lagg0="laggproto failover laggport alc0 \
#                               laggport wlan0 SYNCDHCP"
#                             #ifconfig_lagg0_ipv6="inet6 accept_rtadv"
#
#                             ifconfig_bridge1_name="br1"
#                             ifconfig_bridge0_name="br0"
#                             autobridge_interfaces="br1 br0"
#                             #autobridge_br1=""
#                             ifconfig_br1="inet 192.168.1.161/27 up"
#                             autobridge_br0="alc0"
#                             ifconfig_br0="up"

# (Void Linux)                    (Linux)
# /etc/rc.local                   /etc/qemu/bridge.conf
# ------------------------------  ---------------------
# ip link add br1 type bridge     allow br1
# ip addr add 192.168.1.161/27 \  allow br0
#   dev br1
# ip link set dev br1 up          $ chown root:kvm /etc/qemu/bridge.conf
#                                 $ chmod 0640 /etc/qemu/bridge.conf
# ip link add br0 type bridge     $ chmod u+s /usr/lib/qemu/qemu-bridge-helper
# ip link set dev br0 up            or
# ip link set dev enp3s0 up       $ chmod u+s /usr/libexec/qemu-bridge-helper
# ip addr flush dev enp3s0
# ip link set enp3s0 master br0
#
# ip[6]tables -t nat -X


# NOTE, Linux|BSD dnsmasq config for qemu network - nat br1
# (Linux|BSD)                     (FreeBSD)
# [/usr/local]/etc/dnsmasq.conf   /etc/rc.conf ..
# -----------------------------   ---------------
# except-interface=lo[0]          dnsmasq_conf="/usr/local/etc/dnsmasq.conf"
# interface=b1                    dnsmasq_enable="YES"
# bind-dynamic                    gateway_enable="YES"
# dhcp-range=192.168.1.162, \     #ipv6_gateway_enable="YES"
#   192.168.1.190,12h
# strict-order


# NOTE, qemu-ifup & qemu-ifdown scripts
# (Linux)                          (Linux)
# /etc/qemu-ifup                   /etc/qemu-ifdown
# -------------------------------  --------------------------------
# #!/bin/sh                        #!/bin/sh
# set -x                           set -x
# switch=${switch:-br0}            switch=${switch:-br0}
# if [ -n "$1" ] ; then            if [ -n "$1" ] ; then
#   ip tuntap add dev $1 \           ip link set $1 nomaster
#      mode tap group kvm            ip link set dev $1 down
#   ip link set dev $1 up            ip tuntap del dev $1 mode tap
#   sleep 3s                         exit 0
#   ip link set $1 master $switch  else
#   exit 0                           echo "Error: no interface \
# else                                 (tapN) specified"
#   echo "Error: no interface \      exit 1
#     (tapN) specified"            fi
#   exit 1
# fi

# (FreeBSD)                        (FreeBSD)
# /usr/local/etc/qemu-ifup         /usr/local/etc/qemu-ifdown
# -------------------------------  --------------------------------
# #!/bin/sh                        #!/bin/sh
# set -x                           set -x
# switch=${switch:-br0}            switch=${switch:-br0}
# if [ -n "$1" ] ; then            if [ -n "$1" ] ; then
#   ifconfig $1 create               ifconfig $switch deletem $1
#   ifconfig $1 up                   ifconfig $1 down
#   sleep 3s                         ifconfig $1 destroy
#   ifconfig $switch addm $1 up      exit 0
#   exit 0                         else
# else                               echo "Error: no interface \
#   echo "Error: no interface \        (tapN) specified"
#     (tapN) specified"              exit 1
#   exit 1                         fi
# fi

# (FreeBSD) auto create|destroy tap interfaces - tap0 on br0 & tap1 on br1
# /etc/rc.local ..
# --------------------------------------------
# env switch=br1 /usr/local/etc/qemu-ifup tap1
# /usr/local/etc/qemu-ifup tap0
#
# /etc/rc.shutdown ..
# --------------------------------------------
# env switch=br1 /usr/local/etc/qemu-ifdown tap1
# /usr/local/etc/qemu-ifdown tap0


# NOTE, Linux|BSD modify firewall rules|services for qemu network - nat br1
# ### define nat_ifc = br1 ; define natip_cidr = 192.168.1.160/27 ###
# (Linux - firewalld|iptables|nftables)
# #?firewall-offline-cmd [--zone=external] --add-source=$natip_cidr \
# #?  --add-masquerade
# #iptables -t nat -I POSTROUTING -o $ext_ifc -j MASQUERADE
# #nft insert rule ip nat postrouting oifname $ext_ifc counter masquerade
# #iptables -t nat -I POSTROUTING -s $natip_cidr ! -d $natip_cidr -j MASQUERADE
# nft insert rule ip nat postrouting ip saddr $natip_cidr ip daddr != \
#   $natip_cidr counter masquerade
#
# #?firewall-offline-cmd [--zone=external] --add-rich-rule='rule family=ipv4 \
# #?  source address=$natip_cidr accept'
# #iptables -I FORWARD -i $nat_ifc -o $ext_ifc -j ACCEPT
# #nft insert rule inet filter forward iifname $nat_ifc oifname $ext_ifc counter \
# #  accept
# #iptables -I FORWARD -s $natip_cidr -i $nat_ifc -j ACCEPT
# nft insert rule inet filter forward ip saddr $natip_cidr iifname $nat_ifc \
#   counter accept
#
# #?firewall-offline-cmd [--zone=external] --add-rich-rule='rule family=ipv4 \
# #?  destination address=$natip_cidr accept'
# #iptables -I FORWARD -i $ext_ifc -o $nat_ifc -m conntrack --ctstate RELATED, \
# #  ESTABLISHED -j ACCEPT
# #nft insert rule inet filter forward iifname $ext_ifc oifname $nat_ifc \
# #  ct state related,established counter accept
# #iptables -I FORWARD -d $natip_cidr -o $nat_ifc -m conntrack --ctstate \
# #  RELATED,ESTABLISHED -j ACCEPT
# nft insert rule inet filter forward ip daddr $natip_cidr oifname $nat_ifc \
#   ct state related,established counter accept

# ### ext_ifc = "alc0" ; nat_ifc = "br1" ###
# (BSD - pf)
# ..
# scrub in all fragment reassemble no-df max-mss 1440
# nat on \$ext_ifc inet from \$nat_ifc:network to any -> (\$ext_ifc)
# block all label 'policy deny incoming, deny outgoing'
# ..
# #pass from \$nat_ifc:network to any keep state
# pass on \$nat_ifc from \$nat_ifc:network to any
# pass on \$ext_ifc from \$nat_ifc:network to any keep state
# ..

# (Linux) $ sed -i 's|domain|domain, bootps, bootpc, mdns|g' /etc/nftables.conf
# (Linux) $ sed -i 's|domain|domain, bootps, bootpc, mdns|g' /etc/nftables/*.conf
# (BSD) $ sed -i '' 's|domain|domain, bootps, bootpc, mdns|g' /etc/pf/*.rules

# QEMU net option examples
# # nic with model and random MAC address
#  -net nic,model=virtio-net-pci,macaddr=52:54:00:$(openssl rand -hex 3 | \
#    sed 's|\(..\)|\1:|g; s|:$||') \
# # then either below:
#  ${NET_OPTS:--net bridge,br=br0}
#  ${NET_OPTS:--net tap,ifname=tap0,script=no,downscript=no}
#  ${NET_OPTS:--net user,hostfwd=tcp::4022-:22}
