insmod efi_gop
insmod efi_uga
insmod gfxterm
insmod search_fs_uuid
insmod search_fs_label
insmod regexp

set gfxmode=1024x768        # environment variable
set gfxpayload=1024x768     # environment variable

#search --no-floppy --set=isopart --fs-uuid 588f3226-f49e-4e43-9090-7d31ec7a0fc3
search --no-floppy --set=isopart --label MULTI_ISOS

#search --no-floppy --set --label MULTI_ISOS
probe --set=rootuuid --fs-uuid $root
set imgdevpath="/dev/disk/by-uuid/$rootuuid"

# use inside each menuentry
# loopback loop ($isopart)$isofile

## Note: submenu only propagates some environment variables
export gfxmode
export gfxpayload

export isopart
export rootuuid
export imgdevpath

submenu 'FreeBSD variants' {
	for isofile in /boot/distros/freebsd/FreeBSD-*-amd64-*.iso ; do
        #set isofile='/boot/distros/freebsd/FreeBSD-11.0-RELEASE-amd64-disc1.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
        regexp --set=distro_ver "/boot/distros/freebsd/FreeBSD-([.0-9]*-RELEASE-amd64-.*)\.iso" "$isofile"
        menuentry "[loopback]FreeBSD ${distro_ver}" "$isofile" {
            #terminal_output gfxterm
            insmod iso9660
            insmod ufs2
            echo "Using iso file: (${isopart})${isofile}" ; sleep 3

            loopback loop ($isopart)$isofile
            kfreebsd (loop)/boot/kernel/kernel
			kfreebsd_module $isofile type=mfs_root
			set kFreeBSD.vfs.root.mountfrom=cd9660:/dev/md0
			set kFreeBSD.vfs.root.mountfrom.options=ro
			set kFreeBSD.grub.platform=$grub_platform
        }
    done

	menuentry "[chainload]FreeBSD *RELEASE" {
		#terminal_output gfxterm
		insmod iso9660
		insmod ufs2
		insmod zfs
		#set bsdpart=hd0,gpt4
		search --no-floppy --set=bsdpart --file /boot/loader

		if [ "${grub_platform}" == "pc" ] ; then
			kfreebsd ($bsdpart)/boot/loader # ($bsdpart)/boot/zfsloader
		else
			chainloader ($bsdpart)/boot/loader.efi
		fi
	}
}

submenu 'Debian variants' {
    for isofile in /boot/distros/devuan/live/devuan_*_amd64*_desktop-live.iso ; do
        #set isofile='/boot/distros/devuan/live/devuan_jessie_1.0.0_amd64_desktop-live.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
        regexp --set=distro_ver "/boot/distros/devuan/live/devuan_(.*_amd64*)_desktop-live\.iso" "$isofile"
        menuentry "[loopback]Devuan Live ${distro_ver}" "$isofile" {
            terminal_output gfxterm
            echo "Using iso file: (${isopart})${isofile}" ; sleep 3

            loopback loop ($isopart)$isofile
            for kernel0 in (loop)/live/vmlinuz-* ; do
                regexp --set=kernel_ver "vmlinuz-(.*)" "$kernel0"
            done
            linux (loop)/live/vmlinuz username=devuan boot=live components locales=en_US.UTF-8 time/zone=UTC hostname=debian-boxp0000 domain= config findiso=$isofile video=vesa:ywrap,mtrr -- quiet
            #linux (loop)/live/vmlinuz boot=live config fromiso=$imgdevpath:$isofile components locales=en_US.UTF-8 time/zone=UTC hostname=debian-boxp0000 domain= splash
            initrd (loop)/live/initrd.img
        }
    	#menuentry "[loopback]Devuan Live Installer ${distro_ver}" "$isofile" {
        #   terminal_output gfxterm
        #   echo "Using iso file: (${isopart})${isofile}" ; sleep 3
        #
        #   loopback loop ($isopart)$isofile
        #   linux (loop)/d-i/vmlinuz findiso=$isofile boot=live components locales=en_US.UTF-8 time/zone=UTC hostname=debian-boxp0000 domain= splash
        #   #fromiso=$imgdevpath:$isofile
        #   initrd (loop)/d-i/initrd.gz
        #}
    done

    for isofile in /boot/distros/devuan/devuan_*_amd64_*.iso ; do
        #set isofile='/boot/distros/devuan/devuan_jessie_1.0.0_amd64_NETINST.iso'
        #https://pkgmaster.devuan.org/devuan/dists/beowulf/main/installer-amd64/current/images/hd-media/*/initrd.gz
        #set initrdfile='/boot/distros/devuan/devuan_beowulf_3.1.1_amd64_initrd.gz'
        set initrdfile='/boot/distros/devuan/devuan_*_amd64_initrd.gz'
        if [ ! -e "$isofile" ] ; then break ; fi
        regexp --set=distro_ver "/boot/distros/devuan/devuan_(.*_[.0-9]*_amd64_.*)\.iso" "$isofile"
        menuentry "[loopback]Devuan ${distro_ver}" "$isofile" {
            terminal_output gfxterm
            echo "Using iso file: (${isopart})${isofile}" ; sleep 3

            loopback loop ($isopart)$isofile
            linux (loop)/boot/isolinux/linux video=1024x768 locale=en_US keymap=us time/zone=UTC hostname=debian-boxp0000 domain= iso-scan/ask_second_pass=true iso-scan/filename=$isofile noeject
            #initrd (loop)/boot/isolinux/initrd.gz
            initrd $initrdfile
        }
        menuentry "[loopback]Devuan (preseed) ${distro_ver}" "$isofile" {
            terminal_output gfxterm
            echo "Using iso file: (${isopart})${isofile}" ; sleep 3

            loopback loop ($isopart)$isofile
            linux (loop)/boot/isolinux/linux video=1024x768 auto=true preseed/file=/hd-media/init/debian/lvm-hdd-preseed.cfg hostname=debian-boxp0000 domain= locale=en_US keymap=us console-setup/ask_detect=false mirror/http/hostname=deb.devuan.org mirror/http/directory=/merged iso-scan/ask_second_pass=true iso-scan/filename=$isofile noeject
            #initrd (loop)/boot/isolinux/initrd.gz
            initrd $initrdfile
        }
    done

    for isofile in /boot/distros/debian/live/debian-live-*-amd64-*.iso ; do
        #set isofile='/boot/distros/debian/live/debian-live-8.6.0-amd64-standard.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
        regexp --set=distro_ver "/boot/distros/debian/live/debian-live-(.*)\.iso" "$isofile"
        menuentry "[loopback]Debian Live ${distro_ver}" "$isofile" {
            terminal_output gfxterm
            echo "Using iso file: (${isopart})${isofile}" ; sleep 3

            loopback loop ($isopart)$isofile
            for kernel0 in (loop)/live/vmlinuz-* ; do
                regexp --set=kernel_ver "vmlinuz-(.*)" "$kernel0"
            done
            linux (loop)/live/vmlinuz-$kernel_ver boot=live components locales=en_US.UTF-8 time/zone=UTC hostname=debian-boxp0000 domain= config findiso=$isofile video=vesa:ywrap,mtrr -- quiet
            #linux (loop)/live/vmlinuz-$kernel_ver boot=live config fromiso=$imgdevpath:$isofile components locales=en_US.UTF-8 time/zone=UTC hostname=debian-boxp0000 domain= splash
            initrd (loop)/live/initrd.img-$kernel_ver
        }
    	#menuentry "[loopback]Debian Live Installer ${distro_ver}" "$isofile" {
        #   terminal_output gfxterm
        #   echo "Using iso file: (${isopart})${isofile}" ; sleep 3
        #
        #   loopback loop ($isopart)$isofile
        #   linux (loop)/d-i/vmlinuz findiso=$isofile boot=live components locales=en_US.UTF-8 time/zone=UTC hostname=debian-boxp0000 domain= splash
        #   #fromiso=$imgdevpath:$isofile
        #   initrd (loop)/d-i/initrd.gz
        #}
    done

    for isofile in /boot/distros/debian/debian-*-amd64-*.iso ; do
        #set isofile='/boot/distros/debian/debian-8.6.0-amd64-netinst.iso'
         #http://ftp.debian.org/debian/dists/stable/main/installer-amd64/current/images/hd-media/*/initrd.gz
        #set initrdfile='/boot/distros/debian/debian-11.0.0-amd64-initrd.gz'
        set initrdfile='/boot/distros/debian/debian-*-amd64-initrd.gz'
        if [ ! -e "$isofile" ] ; then break ; fi
        regexp --set=distro_ver "/boot/distros/debian/debian-([.0-9]*-amd64-.*)\.iso" "$isofile"
        menuentry "[loopback]Debian ${distro_ver}" "$isofile" {
            terminal_output gfxterm
            echo "Using iso file: (${isopart})${isofile}" ; sleep 3

            loopback loop ($isopart)$isofile
            linux (loop)/install.amd/vmlinuz video=1024x768 locale=en_US keymap=us time/zone=UTC hostname=debian-boxp0000 domain= iso-scan/ask_second_pass=true iso-scan/filename=$isofile noeject
            initrd $initrdfile
        }
        menuentry "[loopback]Debian (preseed) ${distro_ver}" "$isofile" {
            terminal_output gfxterm
            echo "Using iso file: (${isopart})${isofile}" ; sleep 3

            loopback loop ($isopart)$isofile
            linux (loop)/install.amd/vmlinuz video=1024x768 auto=true preseed/file=/hd-media/init/debian/lvm-hdd-preseed.cfg hostname=debian-boxp0000 domain= locale=en_US keymap=us console-setup/ask_detect=false mirror/http/hostname=ftp.us.debian.org mirror/http/directory=/debian iso-scan/ask_second_pass=true iso-scan/filename=$isofile
            initrd $initrdfile
        }
    done
}

submenu 'Void Linux variants' {
	for isofile in /boot/distros/voidlinux/void-live-x86_64-*.iso ; do
		#set isofile='/boot/distros/voidlinux/void-live-x86_64-20160430.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
		regexp --set=distro_ver "/boot/distros/voidlinux/void-live-(.*)\.iso" "$isofile"
		menuentry "[loopback]Void Linux Live ${distro_ver}" "$isofile" {
			terminal_output gfxterm
			echo "Using iso file: (${isopart})${isofile}" ; sleep 3

			loopback loop ($isopart)$isofile
			probe --label --set=cd_label (loop)
			linux (loop)/boot/vmlinuz iso-scan/filename=$isofile root=live:CDLABEL=$cd_label ro init=/sbin/init rd.luks=0 rd.md=0 rd.dm=0 loglevel=4 gpt add_efi_memmap vconsole.unicode=1 vconsole.keymap=us locale.LANG=en_US.UTF-8 rd.live.overlay.overlayfs=1
			initrd (loop)/boot/initrd
		}
	done
}

submenu 'Arch Linux variants' {
    for isofile in /boot/distros/archlinux/archlinux-*-x86_64.iso ; do
        #set isofile='/boot/distros/archlinux/archlinux-2016.10.01-x86_64.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
        regexp --set=distro_ver "/boot/distros/archlinux/archlinux-(.*)\.iso" "$isofile"
        menuentry "[loopback]Arch Linux ${distro_ver}" "$isofile" {
            terminal_output gfxterm
            echo "Using iso file: (${isopart})${isofile}" ; sleep 3

            loopback loop ($isopart)$isofile
            linux (loop)/arch/boot/x86_64/vmlinuz-linux img_dev=$imgdevpath img_loop=$isofile earlymodules=loop
            initrd (loop)/arch/boot/intel-ucode.img (loop)/arch/boot/amd-ucode.img (loop)/arch/boot/x86_64/initramfs-linux.img
        }
    done

    for isofile in /boot/distros/artix/artix-*-x86_64.iso ; do
        #set isofile='/boot/distros/artix/artix-base-openrc-20201207-x86_64.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
        regexp --set=distro_ver "/boot/distros/artix/artix-(.*)\.iso" "$isofile"
        menuentry "[loopback]Artix ${distro_ver}" "$isofile" {
            terminal_output gfxterm
            echo "Using iso file: (${isopart})${isofile}" ; sleep 3

            loopback loop ($isopart)$isofile
            linux (loop)/boot/vmlinuz-x86_64 img_dev=$imgdevpath img_loop=$isofile earlymodules=loop
            initrd (loop)/boot/intel-ucode.img (loop)/boot/amd-ucode.img (loop)/boot/initramfs-x86_64.img
        }
    done
}

submenu 'Alpine variants' {
    for isofile in /boot/distros/alpine/alpine-*-x86_64.iso ; do
        #set isofile='/boot/distros/alpine/alpine-3.4.3-x86_64.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
        regexp --set=distro_ver "/boot/distros/alpine/alpine-(.*)\.iso" "$isofile"
        menuentry "[loopback]Alpine ${distro_ver}" "$isofile" {
            terminal_output gfxterm
            echo "Using iso file: (${isopart})${isofile}" ; sleep 3

            loopback loop ($isopart)$isofile
            linux (loop)/boot/vmlinuz-lts modules=loop,squashfs,sd-mod,usb-storage quiet nomodeset
            initrd (loop)/boot/initramfs-lts
        }
    done
}

submenu 'openSUSE variants' {
	#for isofile in /boot/distros/opensuse/live/openSUSE-*-x86_64*.iso ; do
	for isofile in /boot/distros/opensuse/live/GeckoLinux*.x86_64*.iso ; do
		#set isofile='/boot/distros/opensuse/openSUSE-Leap-42.1-DVD-x86_64.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
		#regexp --set=distro_ver "/boot/distros/opensuse/live/openSUSE-(.*)\.iso" "$isofile"
		regexp --set=distro_ver "/boot/distros/opensuse/live/GeckoLinux_(.*)\.iso" "$isofile"
		menuentry "[loopback]openSUSE ${distro_ver}" "$isofile" {
			terminal_output gfxterm
			echo "Using iso file: (${isopart})${isofile}" ; sleep 3

			loopback loop ($isopart)$isofile
			probe --label --set=cd_label (loop)
			linuxefi (loop)/boot/x86_64/loader/linux iso-scan/filename=$isofile root=live:CDLABEL=$cd_label ro rd.live.image rd.live.overlay.persistent rd.live.overlay.cowfs=ext4
			initrdefi (loop)/boot/x86_64/loader/initrd
		}
	done

	#for isofile in /boot/distros/opensuse/openSUSE-*-x86_64.iso ; do
	for isofile in /boot/distros/opensuse/live/GeckoLinux*.x86_64*.iso ; do
		#set isofile='/boot/distros/opensuse/openSUSE-Leap-42.1-NET-x86_64.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
		#regexp --set=distro_ver "/boot/distros/opensuse/openSUSE-(.*)\.iso" "$isofile"
		regexp --set=distro_ver "/boot/distros/opensuse/live/GeckoLinux_(.*)\.iso" "$isofile"
		menuentry "[loopback]openSUSE ${distro_ver}" "$isofile" {
			terminal_output gfxterm
			echo "Using iso file: (${isopart})${isofile}" ; sleep 3

			loopback loop ($isopart)$isofile
			linux (loop)/boot/x86_64/loader/linux install=hd:$isofile
			initrd (loop)/boot/x86_64/loader/initrd
		}
		menuentry "[loopback]openSUSE (autoinst) ${distro_ver}" "$isofile" {
			terminal_output gfxterm
			echo "Using iso file: (${isopart})${isofile}" ; sleep 3

			loopback loop ($isopart)$isofile
			linux (loop)/boot/x86_64/loader/linux install=http://download.opensuse.org/distribution/openSUSE-current/repo/oss/ autoyast=file:///mounts/mp_0001/init/suse/lvm-hdd-autoinst.xml netsetup=dhcp hostname=suse-boxp0000 domain= textmode=1
			initrd (loop)/boot/x86_64/loader/initrd
		}
	done
}

submenu 'RedHat variants' {
	for isofile in /boot/distros/rocky/live/Rocky-*.iso ; do
		#set isofile='/boot/distros/rocky/live/Rocky-8.5-XFCE-20211115.iso'
       if [ ! -e "$isofile" ] ; then break ; fi
		regexp --set=distro_ver "/boot/distros/rocky/live/Rocky-(.*)\.iso" "$isofile"
		menuentry "[loopback]Rocky ${distro_ver}" "$isofile" {
			terminal_output gfxterm
			echo "Using iso file: (${isopart})${isofile}" ; sleep 3

			loopback loop ($isopart)$isofile
			probe --label --set=cd_label (loop)
			linuxefi (loop)/isolinux/vmlinuz iso-scan/filename=$isofile root=live:CDLABEL=$cd_label ro rd.live.image
			#rootfstype=auto rd.luks=0 rd.md=0 rd.dm=0
			initrdefi (loop)/isolinux/initrd.img
		}
	done

	for isofile in /boot/distros/centos/CentOS-*-x86_64-*.iso ; do
		#set isofile='/boot/distros/centos/CentOS-Stream-8-x86_64-20201211-boot.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
		regexp --set=distro_ver "/boot/distros/centos/CentOS-(.*)\.iso" "$isofile"
		menuentry "[loopback]CentOS [Stream] ${distro_ver}" "$isofile" {
			terminal_output gfxterm
			echo "Using iso file: (${isopart})${isofile}" ; sleep 3

			loopback loop ($isopart)$isofile
			linux (loop)/images/pxeboot/vmlinuz noeject inst.stage2=hd:$imgdevpath:$isofile inst.repo=hd:sdb3:/
			initrd (loop)/images/pxeboot/initrd.img
		}
		menuentry "[loopback]CentOS [Stream] (kickstart) ${distro_ver}" "$isofile" {
			terminal_output gfxterm
			echo "Using iso file: (${isopart})${isofile}" ; sleep 3

			loopback loop ($isopart)$isofile
			linux (loop)/images/pxeboot/vmlinuz inst.ks=hd:$imgdevpath:/init/redhat/lvm-hdd-anaconda-ks.cfg inst.stage2=hd:$imgdevpath:$isofile inst.repo=http://mirror.centos.org/centos/8-stream/BaseOS/x86_64/os ip=::::redhat-boxp0000::dhcp hostname=redhat-boxp0000 text quiet nomodeset video=1024x768
			initrd (loop)/images/pxeboot/initrd.img
		}
	done

	for isofile in /boot/distros/almalinux/AlmaLinux-*-x86_64-*.iso ; do
		#set isofile='/boot/distros/almalinux/AlmaLinux-8-x86_64-boot.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
		regexp --set=distro_ver "/boot/distros/almalinux/AlmaLinux-(.*)\.iso" "$isofile"
		menuentry "[loopback]AlmaLinux ${distro_ver}" "$isofile" {
			terminal_output gfxterm
			echo "Using iso file: (${isopart})${isofile}" ; sleep 3

			loopback loop ($isopart)$isofile
			linux (loop)/images/pxeboot/vmlinuz noeject inst.stage2=hd:$imgdevpath:$isofile inst.repo=hd:sdb3:/
			initrd (loop)/images/pxeboot/initrd.img
		}
		menuentry "[loopback]AlmaLinux (kickstart) ${distro_ver}" "$isofile" {
			terminal_output gfxterm
			echo "Using iso file: (${isopart})${isofile}" ; sleep 3

			loopback loop ($isopart)$isofile
			linux (loop)/images/pxeboot/vmlinuz inst.ks=hd:$imgdevpath:/init/redhat/lvm-hdd-anaconda-ks.cfg inst.stage2=hd:$imgdevpath:$isofile inst.repo=http://repo.almalinux.org/almalinux/8/BaseOS/x86_64/os ip=::::redhat-boxp0000::dhcp hostname=redhat-boxp0000 text quiet nomodeset video=1024x768
			initrd (loop)/images/pxeboot/initrd.img
		}
	done

	for isofile in /boot/distros/rocky/Rocky-*-x86_64-*.iso ; do
		#set isofile='/boot/distros/rocky/Rocky-8-x86_64-boot.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
		regexp --set=distro_ver "/boot/distros/centos/CentOS-(.*)\.iso" "$isofile"
		menuentry "[loopback]Rocky ${distro_ver}" "$isofile" {
			terminal_output gfxterm
			echo "Using iso file: (${isopart})${isofile}" ; sleep 3

			loopback loop ($isopart)$isofile
			linux (loop)/images/pxeboot/vmlinuz noeject inst.stage2=hd:$imgdevpath:$isofile inst.repo=hd:sdb3:/
			initrd (loop)/images/pxeboot/initrd.img
		}
		menuentry "[loopback]Rocky (kickstart) ${distro_ver}" "$isofile" {
			terminal_output gfxterm
			echo "Using iso file: (${isopart})${isofile}" ; sleep 3

			loopback loop ($isopart)$isofile
			linux (loop)/images/pxeboot/vmlinuz inst.ks=hd:$imgdevpath:/init/redhat/lvm-hdd-anaconda-ks.cfg inst.stage2=hd:$imgdevpath:$isofile inst.repo=http://dl.rockylinux.org/pub/rocky/8/BaseOS/x86_64/os ip=::::redhat-boxp0000::dhcp hostname=redhat-boxp0000 text quiet nomodeset video=1024x768
			initrd (loop)/images/pxeboot/initrd.img
		}
	done
}

submenu 'PCLinuxOS Live variants' {
    for isofile in /boot/distros/pclinuxos/pclinuxos64-*.iso ; do
        #set isofile='/boot/distros/pclinuxos/pclinuxos64-KDE-2016.03.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
        regexp --set=distro_ver "/boot/distros/pclinuxos/pclinuxos64-(.*)\.iso" "$isofile"
        menuentry "[loopback]PCLinuxOS Live ${distro_ver}" "$isofile" {
            terminal_output gfxterm
            echo "Using iso file: (${isopart})${isofile}" ; sleep 3

            loopback loop ($isopart)$isofile
            linux (loop)/isolinux/vmlinuz bootfromiso=/$isofile livecd=livecd root=/dev/rd/3 keyb=us 3 nokmsboot
            initrd (loop)/isolinux/initrd.gz
        }
    done
}

submenu 'Mageia variants' {
	for isofile in /boot/distros/mageia/live/Mageia-*-Live-*-x86_64.iso ; do
		#set isofile='/boot/distros/mageia/Mageia-5-Live-Xfce-x86_64.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
		regexp --set=distro_ver "/boot/distros/mageia/live/Mageia-(.*)\.iso" "$isofile"
		menuentry "[loopback]Mageia ${distro_ver}" "$isofile" {
			terminal_output gfxterm
			echo "Using iso file: (${isopart})${isofile}" ; sleep 3

			loopback loop ($isopart)$isofile
			linux (loop)/boot/vmlinuz automatic=method:disk quiet
			initrd (loop)/boot/all.rdz
		}
	done

	for isofile in /boot/distros/mageia/Mageia-*-x86_64.iso ; do
		#set isofile='/boot/distros/mageia/Mageia-5-x86_64.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
		regexp --set=distro_ver "/boot/distros/mageia/Mageia-(.*)\.iso" "$isofile"
		menuentry "[loopback]Mageia ${distro_ver}" "$isofile" {
			terminal_output gfxterm
			echo "Using iso file: (${isopart})${isofile}" ; sleep 3

			loopback loop ($isopart)$isofile
			linux (loop)/isolinux/x86_64/vmlinuz automatic=method:disk quiet
			initrd (loop)/isolinux/x86_64/all.rdz
		}
		menuentry "[loopback]Mageia (auto_inst) ${distro_ver}" "$isofile" {
			terminal_output gfxterm
			echo "Using iso file: (${isopart})${isofile}" ; sleep 3

			loopback loop ($isopart)$isofile
			linux (loop)/isolinux/x86_64/vmlinuz automatic=method:http,server:mirrors.kernel.org,directory:mageia/distrib/8/x86_64,network:dhcp auto_install=/tmp/media/init/mageia/lvm-hdd-auto_inst.cfg.pl
			initrd (loop)/isolinux/x86_64/all.rdz
		}
	done
}

submenu 'NetBSD variants' {
	for isofile in /boot/distros/netbsd/NetBSD-*.iso ; do
        #set isofile='/boot/distros/netbsd/NetBSD-7.0.1-amd64.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
        regexp --set=distro_ver "/boot/distros/netbsd/NetBSD-([.0-9]*-amd64.*)\.iso" "$isofile"
        menuentry "[loopback]NetBSD ${distro_ver}" "$isofile" {
            #terminal_output gfxterm
            insmod iso9660
            insmod ufs2
            echo "Using iso file: (${isopart})${isofile}" ; sleep 3

            loopback loop ($isopart)$isofile
            knetbsd (loop)/netbsd
            knetbsd_module_elf (loop)/*/installation/miniroot/miniroot.kmod
        }
    done
}

submenu 'OpenBSD variants' {
	for isofile in /boot/distros/openbsd/install*.iso ; do
        #set isofile='/boot/distros/openbsd/install59.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
        regexp --set=distro_ver "/boot/distros/openbsd/install([.0-9]*)\.iso" "$isofile"
        menuentry "[loopback]OpenBSD ${distro_ver}" "$isofile" {
            #terminal_output gfxterm
            insmod iso9660
            insmod ufs2
            echo "Using iso file: (${isopart})${isofile}" ; sleep 3

            loopback loop ($isopart)$isofile
            kopenbsd (loop)/*/*/bsd.rd
        }
    done
}

submenu 'GParted Live variants' {
    for isofile in /boot/distros/gparted-live/gparted-live-*.iso ; do
        #set isofile='/boot/distros/gparted-live/gparted-live-0.27.0-1-[amd64|i686].iso'
        if [ ! -e "$isofile" ] ; then break ; fi
        regexp --set=distro_ver "/boot/distros/gparted-live/gparted-live-(.*)\.iso" "$isofile"
        menuentry "[loopback]GParted Live ${distro_ver}" "$isofile" {
            terminal_output gfxterm
            echo "Using iso file: (${isopart})${isofile}" ; sleep 3

            loopback loop ($isopart)$isofile
            linux (loop)/live/vmlinuz boot=live union=overlay username=user config components quiet noswap noeject toram=filesystem.squashfs ip= nosplash findiso=$isofile
            initrd (loop)/live/initrd.img
        }
    done
}

submenu 'Tails variants' {
	for isofile in /boot/distros/tails/tails-*.iso ; do
		#set isofile='/boot/distros/tails/tails-i386-2.6.iso'
        if [ ! -e "$isofile" ] ; then break ; fi
		regexp --set=distro_ver "/boot/distros/tails/tails-(.*)\.iso" "$isofile"
		menuentry "[loopback]Tails Live ${distro_ver}" "$isofile" {
			terminal_output gfxterm
			echo "Using iso file: (${isopart})${isofile}" ; sleep 3

			loopback loop ($isopart)$isofile
			linux (loop)/live/vmlinuz boot=live config findiso=$isofile live-media=removable apparmor=1 security=apparmor nopersistent noprompt timezone=Etc/UTC block.events_dfl_poll_msecs=1000 noautologin module=Tails
			initrd (loop)/live/initrd.img
		}
	done
}

#submenu 'Android-x86 variants' {
#    for isofile in /boot/distros/android-x86/android-x86_64-*.iso ; do
#        #set isofile='/boot/distros/android-x86/android-x86_64-6.0-r1.iso'
#        if [ ! -e "$isofile" ] ; then break ; fi
#        regexp --set=distro_ver "/boot/distros/android-x86/android-(x86_64-[.0-9]*-.*)\.iso" "$isofile"
#        menuentry "[loopback]Android-x86 LiveCD ${distro_ver}" "$isofile" {
#            terminal_output gfxterm
#            echo "Using iso file: (${isopart})${isofile}" ; sleep 3
#
#            loopback loop ($isopart)$isofile
#            linux (loop)/kernel iso-scan/filename=$isofile androidboot.selinux=permissive quiet
#            initrd (loop)/initrd.img
#        }
#    done
#
#    for isofile in /boot/distros/android-x86/android-x86_64-*.iso ; do
#        #set isofile='/boot/distros/android-x86/android-x86_64-6.0-r1.iso'
#        if [ ! -e "$isofile" ] ; then break ; fi
#        regexp --set=distro_ver "/boot/distros/android-x86/android-(x86_64-[.0-9]*-.*)\.iso" "$isofile"
#        menuentry "[loopback]Android-x86 ${distro_ver}" "$isofile" {
#            terminal_output gfxterm
#            echo "Using iso file: (${isopart})${isofile}" ; sleep 3
#
#            loopback loop ($isopart)$isofile
#            linux (loop)/kernel iso-scan/filename=$isofile androidboot.selinux=permissive INSTALL=1
#            initrd (loop)/initrd.img
#        }
#    done
#}
